cmake_minimum_required(VERSION 3.16)
project(P_Project5_CNN)

#C++语言标准
set(CMAKE_CXX_STANDARD 20)
if(MSVC)
    #utf-8支持
    add_compile_definitions("UNICODE")
    add_compile_definitions("_UNICODE")
    add_compile_options("/utf-8")
    #OpenMP 和 SIMD 支持
    add_compile_options("/openmp:experimental")
    add_compile_options("/Qvec-report:2")
    if(CMAKE_BUILD_TYPE MATCHES Debug)
    else()
        add_compile_options("/O2")
    endif()
elseif(CMAKE_COMPILER_IS_GNUCXX)
    #OpenMP支持
    add_compile_options("-fopenmp")
    add_compile_options("-fconcepts")
#    add_compile_options("-mavx2")
#    add_compile_options("-funsafe-math-optimizations")

    add_compile_options("-fopt-info")
    set(_CXX_FLAGS)
    if(_march_native_works)
        message(STATUS "Using processor's vector instructions (-march=native compiler flag set)")
        set(_CXX_FLAGS "-march=native")
    elseif(_xhost_works)
        message(STATUS "Using processor's vector instructions (-xHost compiler flag set)")
        set(_CXX_FLAGS "-xHost")
    else()
        message(STATUS "No suitable compiler flag found for vectorization")
    endif()
    if(CMAKE_BUILD_TYPE MATCHES Debug)
    else()
        add_compile_options("-Ofast")
    endif()
else()
#OpenMP支持
    message("clang")
    add_compile_options("-fopenmp")
    add_compile_options("-fconcepts")
#    add_compile_options("-mavx2")
#    add_compile_options("-funsafe-math-optimizations")

    add_compile_options("-fopt-info")
    set(_CXX_FLAGS)
    if(_march_native_works)
        message(STATUS "Using processor's vector instructions (-march=native compiler flag set)")
        set(_CXX_FLAGS "-march=native")
    elseif(_xhost_works)
        message(STATUS "Using processor's vector instructions (-xHost compiler flag set)")
        set(_CXX_FLAGS "-xHost")
    else()
        message(STATUS "No suitable compiler flag found for vectorization")
    endif()
    if(CMAKE_BUILD_TYPE MATCHES Debug)
    else()
        add_compile_options("-Ofast")
    endif()
    #error("Other compilers are not supported by project5. ")
endif()
OPTION (USE_OpenMP "Use OpenMP" ON)
IF(USE_OpenMP)
    FIND_PACKAGE(OpenMP)
    IF(OPENMP_FOUND)
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    ENDIF()
ENDIF()
include_directories(
        ${PROJECT_SOURCE_DIR}/include/
        ${PROJECT_SOURCE_DIR}/resources/
)
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
add_subdirectory(src)
add_subdirectory(sample)
add_subdirectory(project_doc)
