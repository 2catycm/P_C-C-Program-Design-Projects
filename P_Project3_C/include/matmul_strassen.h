//
// Created by 叶璨铭 on 2021/10/21.
//

#ifndef P_PROJECT3_C_MATMUL_STRASSEN_H
#define P_PROJECT3_C_MATMUL_STRASSEN_H
#include <intrin.h>
#include "matmul_trivial.h" //需要借用平凡矩阵的结构体定义
// interface
struct TrivialMatrix* matmul_strassen(const struct TrivialMatrix* matrixA, const struct TrivialMatrix* matrixB);
// data model
/**
 * usage:
 *  1. As a tuple of two size_t, indicating the size of a matrix/integer rectangle/integer point/etc.
 *  2. As indices of matrix, serving as the iterator/pointer for the matrix.
 */
struct MatrixCoordinate {
    size_t rowIndex;
    size_t columnIndex;
};
struct MatrixCoordinate* createMatrixCoordinate(size_t rowIndex, size_t columnIndex);
struct MatrixCoordinate* matrix_coordinate_addition(const struct MatrixCoordinate coordinateA, const struct MatrixCoordinate coordinateB);
// MatrixCoordinate is a struct without *, so it need not delete.
/**
 * basic rules:
 * 1. Matrix can be seen as a view.
 * 2. Views can generate new computation results that is not a view, as long as the operation does not change the model behind the
 * view.
 * 3. Destroying views does not change the model.
 * 4. views can change its pointing, as long as it is still a view of the original matrix.
 */
struct MatrixView {
    const struct TrivialMatrix* data;
    struct MatrixCoordinate startingCoordinate;
    struct MatrixCoordinate viewSize;  // 5. The coordinate of matrix view should not be pointer. Since they must not be changed
                                       // by others or change others.
};
struct MatrixView* createViewFromView(const struct MatrixView* view, struct MatrixCoordinate startingCoordinate,
                                               struct MatrixCoordinate viewSize);
struct MatrixView* createViewFromTrivialMatrix(const struct TrivialMatrix* matrix, struct MatrixCoordinate startingCoordinate,
                                               struct MatrixCoordinate viewSize);
struct MatrixView* ToView(const struct TrivialMatrix* matrix);
#define MatrixViewGetElement(view, i, j)                                              \
    (TrivialMatrixGetElement((view)->data, (i) + (view)->startingCoordinate.rowIndex, \
                             (j) + (view)->startingCoordinate.columnIndex))  // core function to explain how view works
// functions for view matmul
struct TrivialMatrix* view_view_strassen(const struct MatrixView* matrixViewA, const struct MatrixView* matrixViewB);
/**
 * 本来可以把view中的元素拷贝出来形成新的矩阵，然后乘法，但是这就违背了我们设计view的初衷。
 * 我们想尽可能避免拷贝。
 * @param matrixViewA
 * @param matrixViewB
 * @return A new Matrix of which data is generated by matrixViewA and matrixViewB.
 */
struct TrivialMatrix* view_matmul_simd(const struct MatrixView* matrixViewA, const struct MatrixView* matrixViewB);
struct TrivialMatrix* view_matmul_openmp(const struct MatrixView* matrixViewA, const struct MatrixView* matrixViewB);
struct TrivialMatrix* view_element_by_element_linear_combinations(const struct MatrixView* matrixViewA, const struct MatrixView* matrixViewB,
                                                                  float alpha, float beta);
struct TrivialMatrix* view_addition(const struct MatrixView* matrixA, const struct MatrixView* matrixB);
struct TrivialMatrix* view_subtraction(const struct MatrixView* matrixA, const struct MatrixView* matrixB);
struct TrivialMatrix* view_scalar_multiplication(const struct MatrixView* matrixA, float scalar);
// function for merging four TrivialMatrix instances.
// [first, second]
// [third, fourth]
struct TrivialMatrix* merge_matrices(const struct TrivialMatrix* first, const struct TrivialMatrix* second,
                                     const struct TrivialMatrix* third, const struct TrivialMatrix* fourth);
#endif  // P_PROJECT3_C_MATMUL_STRASSEN_H
